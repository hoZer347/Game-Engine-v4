#pragma once

#include <functional>

namespace eng
{
	// Return type is whether or not to delete after invocation
	typedef std::function<bool()> Task;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	// Window.cpp //
	////////////////////////////////////////////////////////////////////////////////////////////////////

	struct Window;

	struct Matl;
	struct Mesh;
	struct RenderObj;

	namespace wnd
	{
		Window* open(const char* title = "Title", int width = 640, int height = 640);
		void close(Window* window);

		void bind(Window* window, Matl& matl, Mesh& mesh, unsigned int draw_mode);
	};

	////////////////////////////////////////////////////////////////////////////////////////////////////
	// Window.cpp //
	////////////////////////////////////////////////////////////////////////////////////////////////////

		
	
	////////////////////////////////////////////////////////////////////////////////////////////////////
	// Input.cpp //
	////////////////////////////////////////////////////////////////////////////////////////////////////

	struct Thread;

	namespace input
	{
		void open(Window* source);
		void close();
		
		void set_interval(long long interval);
		void bind(Task task, int binding=0, int action=1, int mods=0);

		void next();
		void prev();
	};

	////////////////////////////////////////////////////////////////////////////////////////////////////
	// Input.cpp //
	////////////////////////////////////////////////////////////////////////////////////////////////////
	


	////////////////////////////////////////////////////////////////////////////////////////////////////
	// Engine.cpp //
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void open(bool debug=false);
	void close();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	// Engine.cpp //
	////////////////////////////////////////////////////////////////////////////////////////////////////

};
