#pragma once

#include <functional>

namespace eng
{
	// Return type is whether or not to delete after invocation
	typedef std::function<bool()> Task;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	// Window.cpp //
	////////////////////////////////////////////////////////////////////////////////////////////////////

	struct Window;

	struct Matl;
	struct Mesh;
	
	struct Camera;

	struct RenderObj;

	namespace wnd
	{
		Window* open(const char* title = "Title", int width = 640, int height = 640);
		void close(Window* window);

		Camera& get_cam(Window* window);

		void bind(RenderObj*& render_obj, Window* window, Matl& matl, Mesh& mesh, unsigned int draw_mode);
	};

	////////////////////////////////////////////////////////////////////////////////////////////////////
	// Window.cpp //
	////////////////////////////////////////////////////////////////////////////////////////////////////

		
	
	////////////////////////////////////////////////////////////////////////////////////////////////////
	// Input.cpp //
	////////////////////////////////////////////////////////////////////////////////////////////////////

	struct Thread;

	namespace input
	{
		void open(Window* source);

		void set_interval(long long interval);
		void invoke(int binding, int action, int mods);
		void bind(Task task, int binding, int action, int mods);
		void bind(Task on_press, Task on_release, int binding, int mods);
		void bind(Task on_hold, bool& flag, int binding, int mods);
		void bind(Task on_update, bool& flag, int mods);

		void next();
		void prev();
	};

	////////////////////////////////////////////////////////////////////////////////////////////////////
	// Input.cpp //
	////////////////////////////////////////////////////////////////////////////////////////////////////
	


	////////////////////////////////////////////////////////////////////////////////////////////////////
	// Engine.cpp //
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void open(bool debug=false);
	void close();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	// Engine.cpp //
	////////////////////////////////////////////////////////////////////////////////////////////////////

};
